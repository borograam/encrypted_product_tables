<product-table>
    <div is="filter" db="{ database }" save="{ saveAndUpdate }"></div>
    <div id="table-header" class="row bg">
        <h4 is="sorter"
            class="col-6 p-3"
            db="{ database }"
            field="name"
            compareFunc="{ (a, b) => a.localeCompare(b) }"
            transformFunc="{ a => a.toLowerCase() }"
            save="{ saveAndUpdate }"
        >Название</h4>
        <h4 is="sorter"
            class="col-2 p-3"
            db="{ database }"
            field="price"
            compareFunc="{ (a, b) => a - b }"
            save="{ saveAndUpdate }"
        >Цена</h4>
        <h4 is="sorter"
            class="col-2 p-3"
            db="{ database }"
            field="count"
            compareFunc="{ (a, b) => a - b }"
            save="{ saveAndUpdate }"
        >Количество</h4>
        <h4 is="sorter"
            class="col-2 p-3"
            db="{ database }"
            field="cost"
            compareFunc="{ (a, b) => a - b }"
            save="{ saveAndUpdate }"
        >Стоимость</h4>
    </div>
    <div class="row border-top" each="{ (item, i) in database }" if="{ item.show }">
        <!-- было бы явно логичнее, если бы ячейки сами говорили, что открылись (для закрытия остальных) и так же говорили всем, что информация обновлена, чтобы сохраняться уже тут-->
        <div class="col-6 p-3" is="cell" note="{ item }" item="name" input="{ nameInputAttrs }"
             save="{ saveAndUpdate }" onclick="{ disableAddMode }"></div>
        <div class="col-2 p-3" is="cell" note="{ item }" item="price" input="{ priceInputAttrs }"
             save="{ saveAndUpdate }" onclick="{ disableAddMode }"></div>
        <div class="col-2 p-3" is="cell" note="{ item }" item="count" input="{ countInputAttrs }"
             save="{ saveAndUpdate }" onclick="{ disableAddMode }"></div>
        <div class="col-2 p-3">{ showCurrency(item.cost) }
            <button type="button" class="close" onclick="{ remove }"><span data-num="{ i }">&times;</span></button>
        </div>
        <hr>
    </div>
    <form if="{ addMode }" onsubmit="{ add }">
        <div class="row form-group">
            <div class="col-6"><input name="name" { ...nameInputAttrs }></div>
            <div class="col-2"><input name="price" { ...priceInputAttrs }></div>
            <div class="col-2"><input name="count" { ...countInputAttrs }></div>
            <div class="col-2">
                <button type="submit" class="btn btn-outline-primary">Добавить</button>
                <button type="button" class="close" onclick="{ disableAddMode }"><span aria-hidden="true">&times;</span></button>
            </div>
        </div>
    </form>
    <div class="row" if="{ !addMode }">
        <div class="col-12"><button class="btn btn-outline-primary btn-block" onclick="{ enableAddMode }">Добавить новую строку</button></div>
    </div>


    <script>
        import Sorter from "./sorter.riot";
        import Filter from "./filter.riot";
        import Cell from "./cell.riot";

        export default {
            components: {
                Sorter, Filter, Cell
            },
            nameInputAttrs: {
                type: "text",
                class: "form-control",
                required: true,
                autocomplete: "off"
            },
            priceInputAttrs: {
                type: "text",
                class: "form-control",
                required: true,
                pattern: "\\d+([,\\.]\\d{1,2})?",
                autocomplete: "off"
            },
            countInputAttrs: {
                type: "number",
                class: "form-control",
                required: true,
                autocomplete: "off"
            },
            onBeforeMount(props, state){
                //this.database = [{name: 1, price: 2, count: 3}];
                //this.load();
                this.addMode = false;
                this.database = this.props.db;
            },
            onBeforeUpdate(){
                // calculateCosts ?
                this.database = this.props.db;
            },

            add(e){
                e.preventDefault();
                //console.log(e);
                let note = ["name", "price", "count"]
                    .map(s => {
                        let el = e.target[s];
                        let obj = {[s]: el.value};
                        el.value = "";
                        return obj;
                    }).reduce((a,b) => Object.assign(a,b), {});
                note.price = Math.round(Number(note.price.replace(",", "."))*100);
                note.count = Number(note.count);
                note.show = true;
                //console.log(note);
                this.database.push(note);
                e.target.name.focus();

                this.saveAndUpdate();
                return false;
            },
            remove(e){
                this.database.splice(e.target.dataset.num, 1);
                this.saveAndUpdate();
            },

            enableAddMode(){
                this.addMode = true;
                this.update();
            },
            disableAddMode(){
                this.addMode = false;
                this.update();
            },

            calculateCosts(){
                for(let item of this.database) item.cost = item.price * item.count;
            },
            saveAndUpdate(){
                this.calculateCosts();
                this.props.save();
            },

            showCurrency(n){ // the same one in cell and report
                return `${parseInt(n/100)}${n%100 ? `.${n%100}` : ""}`;
            },
        }
    </script>
</product-table>